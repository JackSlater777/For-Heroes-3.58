ZVSE2

*** HotA Interference


!?FU(OnAfterErmInstructions);
!!FU(Fun_SetSecSkillValue):P26/1/0;             // Set value - basic Resistance Null
!!FU(Fun_SetSecSkillValue):P26/2/0;             // Set value - advanced Resistance Null
!!FU(Fun_SetSecSkillValue):P26/3/0;             // Set value - expert Resistance Null

; Set up new name
!!SN:H^secskill^/(SKILL_RESISTANCE)/0/^%T(hota.interference.name)^;

; Set up and change the descriptions
!!SN:H^secskill^/(SKILL_RESISTANCE)/(SKILL_BASIC)/^%T(hota.interference.desc1)^;
!!SN:H^secskill^/(SKILL_RESISTANCE)/(SKILL_ADVANCED)/^%T(hota.interference.desc2)^;
!!SN:H^secskill^/(SKILL_RESISTANCE)/(SKILL_EXPERT)/^%T(hota.interference.desc3)^;

; Set up new spec description
!!re i/(HERO_FIRST)/(HERO_LAST_WOG);
  !!HEi:X?(spec:y)/?(spec2:y);
  !!SN&(spec)=0/(spec2)=(SKILL_RESISTANCE):H^spec^/i/2/^%T(hota.interference.spec)^;
!!en;

; Set up new pcx
*!SN:R^oldDefName.def:[group_id]_[frame_id].png^/^data\defs\otherSubFolders\newDefName.def\pngName.png^;  // if it is png then (replace only one frame)
*!SN:R^oldDefName.def^/^newDefName.def^;  // if this is another def, then just replace the whole def with

!?FU(OnAfterLoadGame);
!!FU(Fun_SetSecSkillValue):P26/1/0;             // Set value - basic Resistance Null
!!FU(Fun_SetSecSkillValue):P26/2/0;             // Set value - advanced Resistance Null
!!FU(Fun_SetSecSkillValue):P26/3/0;             // Set value - expert Resistance Null

** start of battle-start trigger
!?FU(OnBeforeBattleUniversal);
; Initialise vars
!!VRi^hota_spellpowerDiff_0^:S0;
!!VRi^hota_spellpowerDiff_1^:S0;

  ; Set up Interference effect if the battle is with two heroes
!!if&i^battle_hero_1^>(NO_HERO);
  !!FU(HotA_SetUpSpellPowerReduction):P(BATTLE_LEFT);
  !!FU(HotA_SetUpSpellPowerReduction):P(BATTLE_RIGHT);
!!en;

** function for interference
!?FU(HotA_SetUpSpellPowerReduction);
!#VA(side:x);
!#VA(usedY[1]:y);

!!VR(enemySide:y):S(side) X1;

; Check for Interference level
!!HEi^battle_hero_%(side)^:S(SKILL_RESISTANCE)/?(resistanceLv:y); [get hero's Resistance level]
!!FU&(resistanceLv)=(SKILL_NOT_LEARNED):E;     [Exit if Resistance is not learned]

; Check for Spell Power
!!HEi^battle_hero_%(enemySide)^:Fd/d/?(spellpower:y)/d; [get enemy hero's spell power]

; Reduce spellpower for the enemy if Resistance is learned and enemy has spell power
!!if&(resistanceLv)>(SKILL_NOT_LEARNED)/(spellpower)>1;
  !!FU(HotA_GetSpellPowerPercentage):P(resistanceLv)/?y1; [Get percentage of spell power left]
  !!VR(newSpellpower:y):S(spellpower) *y1 :100;           [calculate enemy hero's new spell points, decimal adjustment]
  !!HEi^battle_hero_%(enemySide)^:Fd/d/(newSpellpower)/d; [enemy hero's spell power reduced]
  ; Store the reduced spellpower of the enemy hero
  !!VRi^hota_spellpowerDiff_%(enemySide)^:S(newSpellpower) -(spellpower);
!!en;

!?FU(HotA_GetSpellPowerPercentage);
!#VA(resistanceLv:x) (result:x);

!!if&(resistanceLv)=(SKILL_BASIC);
  !!VR(result):S90;                           [basic -10%]
!!el&(resistanceLv)=(SKILL_ADVANCED);
  !!VR(result):S80;                           [advanced -20%]
!!el&(resistanceLv)=(SKILL_EXPERT);
  !!VR(result):S70;                           [expert -30%]
!!en;

** start of battle end trigger
!?FU(OnAfterBattleUniversal);                    [Continue trigger if any skills are enabled]
!!if&i^battle_hero_1^>(NO_HERO);
  !!HEi^battle_hero_0^:Fd/d/d-i^hota_spellpowerDiff_0^/d;
  !!HEi^battle_hero_1^:Fd/d/d-i^hota_spellpowerDiff_1^/d;  
!!en;

*?FU(gem_CreateERMHook);
*!SN:Ex1/1/4638788/(gem_OnDlg_HeroPreview_SpellPowerWrite);

** show the "real" sp and reduced in the next format: 15(20)  
*?FU(gem_OnDlg_HeroPreview_SpellPowerWrite);
*!UN:Cx1/(STRUCT_HOOK_CONTEXT_EAX)/4/?(txtPtr:y);
*!SN:B(txtPtr)/d/?(currentSp:z) B(txtPtr)/d/^(%(currentSp:z))^;

**end
